// The Swift Programming Language
// https://docs.swift.org/swift-book
@preconcurrency import Vision
import UIKit // Precisamos importar UIKit para usar UIImage

// MARK: -  Classificador de Pets
public struct Classification {
    public let label: String
    public let confidence: Float
    public var confidencePercentage: String {
        return String(format: "%.1f%%", confidence * 100)
    }
}

/// Define os tipos de erros que podem ocorrer durante a classifica√ß√£o.
public enum ClassifierError: Error {
    case modelLoadingFailed(Error), imageProcessingFailed(Error), classificationFailed
}

// MARK: - Classificador Principal

/// A classe principal para interagir com o modelo de classifica√ß√£o de pets.
public class PetClassifier {
    // O modelo de Core ML √© carregado uma √∫nica vez e compartilhado por todas as chamadas.
    private static let sharedModel: VNCoreMLModel = {
        do {
            let configuracao = MLModelConfiguration()
            let modelo = try PetClassifierModel(configuration: configuracao).model
            return try VNCoreMLModel(for: modelo)
        } catch {
            fatalError("Falha cr√≠tica ao carregar o modelo de Core ML: \(error)")
        }
    }()
    
    /// Analisa uma imagem para determinar se ela cont√©m um pet. √â a √∫nica fun√ß√£o que voc√™ precisa chamar.
    /// Exemplo de uso: `let isPet = await PetClassifier.analyze(image: suaImagem)`
    public static func analyze(image: UIImage?) async -> Bool {
        // Valida e converte a UIImage para CGImage em um √∫nico passo.
        guard let cgImage = image?.cgImage else {
            print("Nenhuma imagem v√°lida fornecida para an√°lise.")
            return false
        }
        
        // Converte a l√≥gica de completion handler do Vision para o moderno async/await.
        return await withCheckedContinuation { continuation in
            // Cria e configura a requisi√ß√£o de an√°lise.
            let request = VNCoreMLRequest(model: sharedModel) { request, error in
                // Ap√≥s a an√°lise, verifica os resultados.
                guard let results = request.results as? [VNClassificationObservation],
                      let bestResult = results.first, error == nil else {
                    print("üö® Erro ou nenhum resultado retornado pela an√°lise: \(error?.localizedDescription ?? "N/A")")
                    continuation.resume(returning: false)
                    return
                }
                
                // Processa o melhor resultado.
                let isPet = bestResult.identifier == "pets"
                
                // Cria uma inst√¢ncia da nossa struct para usar a formata√ß√£o da porcentagem.
                let classification = Classification(label: bestResult.identifier, confidence: bestResult.confidence)

                print("\n---------------------------------")
                print("Resultado da An√°lise do Pacote:")
                print("   - \(isPet ? "‚úÖ √â um Pet!" : "‚ùå N√£o √© um Pet.")")
                print("   - Label Detectada: '\(classification.label)'")
                print("   - Confian√ßa: \(classification.confidencePercentage)")
                print("---------------------------------")
                continuation.resume(returning: isPet)
            }
            request.imageCropAndScaleOption = .centerCrop
            
            // Executa a requisi√ß√£o.
            do {
                try VNImageRequestHandler(cgImage: cgImage).perform([request])
            } catch {
                print("üö® Falha ao executar a requisi√ß√£o do Vision: \(error.localizedDescription)")
                continuation.resume(returning: false)
            }
        }
    }
}
//
//
//// MARK: - Classificador de Pets
//
///// Esta classe √© a interface principal para o modelo de Machine Learning.
//public class PetClassifier {
//    
//    // MARK: - Carregamento do Modelo
//    // static let garante que o modelo seja carregado da mem√≥ria *apenas uma vez*, na primeira vez que for necess√°rio.
//    ///   Isso √© muito eficiente, pois carregar o modelo pode ser uma opera√ß√£o lenta. A partir da√≠, ele fica pronto para ser usado rapidamente em todas as chamadas futuras.
//    private static let modeloCoreML: VNCoreMLModel = {
//        do {
//            // `PetClassifierModel()` √© a classe que o Xcode gerou automaticamente a partir do seu arquivo .mlmodel.
//            let configuracao = MLModelConfiguration()
//            let modelo = try PetClassifierModel(configuration: configuracao).model
//            
//            // O framework Vision precisa de um "inv√≥lucro" especial para o modelo Core ML. √â isso que `VNCoreMLModel` faz.
//            return try VNCoreMLModel(for: modelo)
//        } catch {
//            // Se o modelo n√£o puder ser carregado (ex: arquivo corrompido ou n√£o encontrado), o app ir√° parar com uma mensagem clara.
//            fatalError("Falha cr√≠tica ao carregar o modelo de Core ML: \(error)")
//        }
//    }()
//    
//    // MARK: - Fun√ß√£o Principal de An√°lise
//    
//    /// Analisa uma imagem para determinar se ela cont√©m um pet.
//    // async: Esta palavra-chave indica que a fun√ß√£o pode realizar um trabalho demorado (como analisar uma imagem)
//    ///   sem travar a interface do seu aplicativo. A palavra  ' await '  √© usada ao cham√°-la para esperar pela resposta.
//    /// - Parameter imagem: A `UIImage` opcional que voc√™ deseja analisar.
//    /// - Returns: `true` se a imagem for classificada como "pets", `false` caso contr√°rio.
//    public static func analisar(imagem: UIImage?) async -> Bool {
//        
//        // Validando a Imagem de Entrada
//        // Primeiro, garantimos que a imagem recebida n√£o √© nula e pode ser convertida para o formato que o Vision entende (`CGImage`).
//        guard let imagemCG = imagem?.cgImage else {
//            print("Nenhuma imagem v√°lida foi fornecida para an√°lise.")
//            return false
//        }
//        
//        //2: Executando a An√°lise de Forma Ass√≠ncrona
//        // O framework Vision usa um estilo de programa√ß√£o mais antigo chamado "completion handler".
//        // `withCheckedContinuation` √© uma "ponte" que nos permite usar esse c√≥digo antigo dentro de uma fun√ß√£o `async` moderna.
//        return await withCheckedContinuation { continuacao in
//            
//            // Cria uma requisi√ß√£o para o Vision, dizendo a ele para usar nosso modelo.
//            let requisicao = criarRequisicaoDeAnalise { resultado in
//                // Quando a an√°lise terminar, este bloco de c√≥digo ser√° executado.
//                // O `resultado` pode ser `.success` ou `.failure`.
//                
//                // Processa o resultado e "desperta" a continua√ß√£o com a resposta final (true ou false).
//                let isPet = processarResultadoDaAnalise(resultado)
//                continuacao.resume(returning: isPet)
//            }
//            
//            // Inicia o processo de an√°lise da imagem com a requisi√ß√£o que acabamos de criar.
//            executarRequisicao(requisicao, na: imagemCG)
//        }
//    }
//    
//    // MARK: - Fun√ß√µes Auxiliares (L√≥gica Interna)
//    
//    /// Cria uma "requisi√ß√£o" (um pedido de trabalho) para o Vision.
//    private static func criarRequisicaoDeAnalise(completion: @escaping (Result<[VNClassificationObservation], Error>) -> Void) -> VNCoreMLRequest {
//        
//        // Diz ao Vision para usar nosso modelo carregado.
//        let requisicao = VNCoreMLRequest(model: modeloCoreML) { (request, error) in
//            // Este √© o "completion handler". Ele √© chamado pelo Vision quando a an√°lise termina.
//            if let error = error {
//                completion(.failure(error))
//                return
//            }
//            guard let observacoes = request.results as? [VNClassificationObservation] else {
//                completion(.failure(ClassifierError.classificationFailed))
//                return
//            }
//            completion(.success(observacoes))
//        }
//        
//        // Configura como a imagem deve ser ajustada para o tamanho que o modelo espera.
//        requisicao.imageCropAndScaleOption = .centerCrop
//        return requisicao
//    }
//    
//    /// Envia a requisi√ß√£o para ser processada pelo Vision.
//    private static func executarRequisicao(_ requisicao: VNCoreMLRequest, na imagem: CGImage) {
//        // O `VNImageRequestHandler` √© o "trabalhador" que efetivamente executa a an√°lise na imagem.
//        let manipulador = VNImageRequestHandler(cgImage: imagem)
//        
//        // A an√°lise √© feita em uma thread de fundo para n√£o travar a tela.
//        DispatchQueue.global(qos: .userInitiated).async {
//            do {
//                try manipulador.perform([requisicao])
//            } catch {
//                print("üö® Falha ao executar a requisi√ß√£o do Vision: \(error.localizedDescription)")
//            }
//        }
//    }
//    
//    /// Interpreta a resposta do Vision e retorna um booleano simples.
//    private static func processarResultadoDaAnalise(_ resultado: Result<[VNClassificationObservation], Error>) -> Bool {
//        switch resultado {
//        case .success(let observacoes):
//            // `observacoes` √© uma lista de poss√≠veis classifica√ß√µes, ordenada da mais prov√°vel para a menos prov√°vel.
//            // Pegamos a primeira, que √© a melhor previs√£o do modelo.
//            guard let melhorResultado = observacoes.first else {
//                print("‚ö†Ô∏è O modelo n√£o retornou nenhuma classifica√ß√£o.")
//                return false
//            }
//            
//            let isPet = melhorResultado.identifier == "pets"
//            let confianca = String(format: "%.1f%%", melhorResultado.confidence * 100)
//            
//            print("\n---------------------------------")
//            print("Resultado da An√°lise:")
//            print("   - Veredito: \(isPet ? "‚úÖ √â um Pet!" : "‚ùå N√£o √© um Pet.")")
//            print("   - Label Detectada: '\(melhorResultado.identifier)'")
//            print("   - Confian√ßa: \(confianca)")
//            print("---------------------------------")
//            
//            return isPet
//            
//        case .failure(let error):
//            print("üö® Erro ao processar o resultado da an√°lise: \(error.localizedDescription)")
//            return false
//        }
//    }
//}
//
///// Define um erro personalizado para o nosso classificador.
//public enum ClassifierError: Error {
//    case classificationFailed
//}
